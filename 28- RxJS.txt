La programacion reactiva es un paradigma de programacion asincrono relacionado con los flujos de datos
y la propagaciÃ³n del cambio. 
Rxjs (Reactive Extensions for JavaScript) es una biblioteca para programacion reactiva que utiliza Observables que 
facilita la composicion de codigo asincrono o basado en devolucion de llamada


RxJS ofrece una serie de funciones que se pueden usar para crear nuevos Observables. Estas funciones
pueden simplificar el proceso de creacion de elementos observables a partir de cosas como 
eventos , temporizadores, promesas, etc. 


Examples 

        -Crear un Observable apartir de una promesa 

        import { fromPromise } from 'rxjs';

        // Create an Observable out of a promise
        const data = fromPromise(fetch('/api/endpoint'));
        // Subscribe to begin listening for async result
        data.subscribe({
        next(response) { console.log(response); },
        error(err) { console.error('Error: ' + err); },
        complete() { console.log('Completed'); }
        });




        -Crear un Observable desde un contador

        import { interval } from 'rxjs';

        // Create an Observable that will publish a value on an interval
        const secondsCounter = interval(1000);
        // Subscribe to begin publishing values
        secondsCounter.subscribe(n =>
        console.log(`It's been ${n} seconds since subscribing!`));




        -Crear un Observable a partir de un eventos

        import { fromEvent } from 'rxjs';

        const el = document.getElementById('my-element');

        // Create an Observable that will publish mouse movements
        const mouseMoves = fromEvent(el, 'mousemove');

        // Subscribe to start listening for mouse-move events
        const subscription = mouseMoves.subscribe((evt: MouseEvent) => {
        // Log coords of mouse movements
        console.log(`Coords: ${evt.clientX} X ${evt.clientY}`);

        // When the mouse is over the upper-left of the screen,
        // unsubscribe to stop listening for mouse movements
        if (evt.clientX < 40 && evt.clientY < 40) {
            subscription.unsubscribe();
        }
        });

